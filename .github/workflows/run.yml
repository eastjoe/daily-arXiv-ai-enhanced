# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: arXiv-daily-ai-enhanced

on:
  schedule:
    - cron: "59 1 * * *"
  workflow_dispatch:


jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        uv sync
    - name: Run script
      run: |
        source .venv/bin/activate
        export OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        export OPENAI_BASE_URL=${{ secrets.OPENAI_BASE_URL }}
        export LANGUAGE="${{ vars.LANGUAGE }}"
        export CATEGORIES="${{ vars.CATEGORIES }}"
        export MODEL_NAME="${{ vars.MODEL_NAME }}"
        bash run.sh

    # ==================== 新增的步骤 ====================
    - name: Send email
      # 仅在前面的步骤成功时执行
      if: success()
      # 设置发送邮件脚本所需的环境变量
      env:
        MAIL_HOST: ${{ secrets.MAIL_HOST }}
        MAIL_USER: ${{ secrets.MAIL_USER }}
        MAIL_PASS: ${{ secrets.MAIL_PASS }}
        RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
      run: |
        source .venv/bin/activate
        # 自动查找最新生成的 markdown 文件
        # 这个项目会将文件生成在 data 目录下
        LATEST_MD_FILE=$(find data -type f -name "*.md" -printf '%T@ %p\n' | sort -nr | head -n 1 | cut -d' ' -f2-)
        
        if [ -z "$LATEST_MD_FILE" ]; then
          echo "No markdown file found in _posts. Skipping email."
          exit 0
        fi
        
        echo "Found latest markdown file: $LATEST_MD_FILE"
        # 将文件路径导出为环境变量，供 python 脚本使用
        export MD_FILE_PATH="$LATEST_MD_FILE"
        
        # 执行发送邮件的脚本
        python send_email.py
    # ======================================================

    - name: commit
      run: |
        git config --global user.email "${{ vars.EMAIL }}"
        git config --global user.name "${{ vars.NAME }}"
        git add .
        # 检查是否有变更需要提交
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        git commit -m "update"
    - name: Pull latest changes and push
      run: |
        # 设置Git配置以处理自动合并
        git config pull.rebase true
        git config rebase.autoStash true
        
        # 尝试推送，如果失败则拉取并重试
        for i in {1..3}; do
          echo "Push attempt $i"
          if git push origin main; then
            echo "Push successful"
            break
          else
            echo "Push failed, pulling latest changes..."
            git pull origin main --no-edit || true
            if [ $i -eq 3 ]; then
              echo "Failed to push after 3 attempts"
              exit 1
            fi
          fi
        done
